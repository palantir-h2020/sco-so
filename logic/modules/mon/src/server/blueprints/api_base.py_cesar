#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2021-present i2CAT
# All rights reserved


from metrics.all_metrics import AllMetrics
from flask import Blueprint, request
from metrics.command_req import CommandReq
from metrics.execute_command import ExecuteCommand
from common.server.http.http_code import HttpCode
from common.server.http.http_response import HttpResponse
from metrics.prometheus_metrics import PrometheusMetrics
from server.logic.prometheus_targets import PrometheusTarget
from server.logic.vim import VIM
from server.logic.vnf import VNF



so_blueprints = Blueprint("so__mon__base", __name__)
all_metrics = AllMetrics()
command_request = CommandReq()
execute_command = ExecuteCommand()
prometheus_targets_handler = PrometheusTarget()
prometheus_metrics = PrometheusMetrics()



@so_blueprints.route("/mon", methods=["GET"])
def base() -> HttpResponse:
    data = {"name": "mon_api"}
    return HttpResponse.formatted(data, HttpCode.OK)


@so_blueprints.route("/mon/vim", methods=["GET"])
def vim_list() -> HttpResponse:
    data = VIM.vim_list()
    return HttpResponse.formatted(data, HttpCode.OK)


@so_blueprints.route("/mon/vnf", methods=["GET"])
def vnf_list() -> HttpResponse:
    data = VNF.vnf_list()
    return HttpResponse.formatted(data, HttpCode.OK)


@so_blueprints.route("/mon/targets", methods=["GET"])
def target_list() -> HttpResponse:
    data = {"targets": prometheus_targets_handler.targets_list()}
    return HttpResponse.formatted(data, HttpCode.OK)


@so_blueprints.route("/mon/targets", methods=["POST", "PUT", "DELETE"])
def handle_targets() -> HttpResponse:
    return_code = prometheus_targets_handler.update_target(request)
    return HttpResponse.formatted({}, return_code)


@so_blueprints.route("/mon/metrics", methods=["POST", "PUT"])
def metrics() -> HttpResponse:
    data = prometheus_metrics.prometheus_metrics(request)
    return HttpResponse.formatted(data, HttpCode.OK)


@so_blueprints.route("/mon/metrics/vnf", methods=["GET"])
def vnf_metrics() -> HttpResponse:
    data = [all_metrics.all_exporter_metrics(request), all_metrics.all_mongodb_metrics()]
    return HttpResponse.formatted(data, HttpCode.OK)


@so_blueprints.route("/mon/metrics/vnf", methods=["POST", "PUT"])
def vnf_metrics_req() -> HttpResponse:
    # data = command_request.metric_remote_command(request)
    # command_request.persist_metric_remote_command()
    command_request.background_monitoring(request)
    # return HttpResponse.formatted(data, HttpCode.OK)
   